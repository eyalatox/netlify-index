'use client';

import { useState } from 'react';
import { AlertTriangle, ChevronDown, ChevronUp, Shield, Code, Target, Copy, ExternalLink, CheckCircle } from 'lucide-react';
import { Vulnerability, getSeverityColor } from '@/types/mcp';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  index: number;
}

// Normalize file paths by removing temporary scan directories
const normalizePath = (filePath: string): string => {
  if (!filePath) return '';
  
  // Remove temporary directory prefix like /var/folders/.../T/mcp-scan-{uuid}/
  // Match pattern: anything up to and including /mcp-scan-{uuid}/
  const scanDirPattern = /^.*\/mcp-scan-[a-f0-9-]+\//;
  const normalized = filePath.replace(scanDirPattern, '');
  
  // If the path is still absolute after normalization, make it relative
  return normalized.startsWith('/') ? normalized.slice(1) : normalized;
};

export default function VulnerabilityCard({ vulnerability, index }: VulnerabilityCardProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [copied, setCopied] = useState(false);

  // Get severity from either the top-level field or CVSS data
  const severity = vulnerability.severity || vulnerability.baseMetricV3?.cvssV3?.baseSeverity || 'UNKNOWN';
  
  // Get category, use CWE as fallback
  const category = vulnerability.category || (vulnerability.cwe ? `CWE: ${vulnerability.cwe}` : 'Security Issue');

  const handleCopyId = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(vulnerability.id);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
      {/* Header */}
      <div className="w-full p-4 bg-white">
        <div className="flex items-start justify-between">
          <div className="flex items-start gap-3 flex-1">
            <AlertTriangle className="w-5 h-5 text-orange-600 mt-0.5 flex-shrink-0" />
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 flex-wrap mb-2">
                <span className="text-sm font-mono text-gray-900 font-semibold">{vulnerability.id}</span>
                <button
                  onClick={handleCopyId}
                  className="p-1 hover:bg-gray-100 rounded transition-colors"
                  title="Copy CVE ID"
                >
                  {copied ? (
                    <CheckCircle className="w-3.5 h-3.5 text-green-600" />
                  ) : (
                    <Copy className="w-3.5 h-3.5 text-gray-400" />
                  )}
                </button>
                <span className={`px-2 py-0.5 text-xs font-semibold rounded border ${getSeverityColor(severity)}`}>
                  {severity}
                </span>
                <span className="px-2 py-0.5 text-xs font-medium bg-gray-100 text-gray-700 rounded">
                  {category}
                </span>
                {vulnerability.isOxOriginal && (
                  <span className="px-2 py-0.5 text-xs font-medium bg-blue-100 text-blue-700 rounded flex items-center gap-1">
                    <Shield className="w-3 h-3" />
                    OX Original
                  </span>
                )}
              </div>
              <p className="text-sm text-gray-700 mb-3">
                {vulnerability.description.split('\n')[0]}
              </p>
              
              {/* Action Buttons */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="px-3 py-1.5 text-xs font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 rounded-md transition-colors flex items-center gap-1"
                >
                  {isExpanded ? (
                    <>
                      <ChevronUp className="w-3.5 h-3.5" />
                      Hide Details
                    </>
                  ) : (
                    <>
                      <ChevronDown className="w-3.5 h-3.5" />
                      View Details
                    </>
                  )}
                </button>
                {vulnerability.cwe && (
                  <a
                    href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe.split('-')[1]}.html`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-3 py-1.5 text-xs font-medium text-gray-600 bg-gray-50 hover:bg-gray-100 rounded-md transition-colors flex items-center gap-1"
                    onClick={(e) => e.stopPropagation()}
                  >
                    Learn More
                    <ExternalLink className="w-3 h-3" />
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Expanded Content */}
      {isExpanded && (
        <div className="p-4 pt-0 bg-white space-y-4">
          {/* CVSS Score */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="text-sm font-semibold text-gray-900 mb-3 flex items-center gap-2">
              <Target className="w-4 h-4" />
              CVSS v3.1 Metrics
            </h4>
            <div className="grid grid-cols-2 gap-3 text-sm">
              <div>
                <span className="text-gray-600">Base Score:</span>
                <span className="ml-2 font-semibold text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.baseScore}
                </span>
                <span className="ml-1 text-xs text-gray-500">
                  ({vulnerability.baseMetricV3.cvssV3.baseSeverity})
                </span>
              </div>
              <div>
                <span className="text-gray-600">Attack Vector:</span>
                <span className="ml-2 font-medium text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.attackVector}
                </span>
              </div>
              <div>
                <span className="text-gray-600">Attack Complexity:</span>
                <span className="ml-2 font-medium text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.attackComplexity}
                </span>
              </div>
              <div>
                <span className="text-gray-600">User Interaction:</span>
                <span className="ml-2 font-medium text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.userInteraction}
                </span>
              </div>
              <div>
                <span className="text-gray-600">Confidentiality:</span>
                <span className="ml-2 font-medium text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.confidentialityImpact}
                </span>
              </div>
              <div>
                <span className="text-gray-600">Integrity:</span>
                <span className="ml-2 font-medium text-gray-900">
                  {vulnerability.baseMetricV3.cvssV3.integrityImpact}
                </span>
              </div>
            </div>
            <div className="mt-3 pt-3 border-t border-gray-200">
              <div className="text-xs text-gray-600 font-mono">
                {vulnerability.baseMetricV3.cvssV3.vectorString}
              </div>
            </div>
          </div>

          {/* CWE */}
          {vulnerability.cwe && (
            <div>
              <h4 className="text-sm font-semibold text-gray-900 mb-2">CWE Classification</h4>
              <span className="inline-block px-3 py-1 bg-purple-100 text-purple-800 text-sm rounded font-mono">
                {vulnerability.cwe}
              </span>
            </div>
          )}

          {/* Exploitation Steps */}
          {vulnerability.exploitationSteps && (
            <div>
              <h4 className="text-sm font-semibold text-gray-900 mb-2">Exploitation Steps</h4>
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-900 whitespace-pre-wrap">
                  {vulnerability.exploitationSteps}
                </p>
              </div>
            </div>
          )}

          {/* Location */}
          {vulnerability.location && (
            <div>
              <h4 className="text-sm font-semibold text-gray-900 mb-2 flex items-center gap-2">
                <Code className="w-4 h-4" />
                Vulnerable Code Location
              </h4>
              <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                <div className="text-xs text-gray-400 mb-2">
                  {normalizePath(vulnerability.location.file)}:{vulnerability.location.line}
                </div>
                <pre className="text-sm text-gray-100">
                  <code>{vulnerability.location.snippet}</code>
                </pre>
              </div>
            </div>
          )}

          {/* Full Description */}
          <div>
            <h4 className="text-sm font-semibold text-gray-900 mb-2">Description</h4>
            <p className="text-sm text-gray-700 whitespace-pre-wrap leading-relaxed">
              {vulnerability.description}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

